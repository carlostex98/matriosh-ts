/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var interpreter = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,16],$V2=[1,35],$V3=[1,33],$V4=[1,32],$V5=[1,34],$V6=[1,31],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,30],$Vf=[1,29],$Vg=[5,17,19,25,29,30,32,37,46,47,50,51,52,61,64,65,66,67,68,77],$Vh=[1,41],$Vi=[1,65],$Vj=[1,60],$Vk=[1,61],$Vl=[1,62],$Vm=[1,63],$Vn=[1,64],$Vo=[1,66],$Vp=[44,71],$Vq=[2,103],$Vr=[1,93],$Vs=[1,94],$Vt=[1,95],$Vu=[1,96],$Vv=[1,97],$Vw=[1,98],$Vx=[1,99],$Vy=[1,100],$Vz=[1,101],$VA=[1,102],$VB=[1,103],$VC=[1,104],$VD=[1,105],$VE=[1,106],$VF=[27,33,40,44,59,60,71,79,80,81,82,83,84,85,86,87,88,89,90],$VG=[1,126],$VH=[1,128],$VI=[40,44,71],$VJ=[1,138],$VK=[1,139],$VL=[1,140],$VM=[27,33,40,44,71],$VN=[31,44,71],$VO=[27,33,40,44,59,60,71,82,83,84,85,86,87,88,90],$VP=[27,33,40,44,59,60,71,80,81,82,83,84,85,86,87,88,90],$VQ=[27,33,40,44,71,82,83,84,85,86,87,88,90],$VR=[27,33,40,44,71,86,87,88,90],$VS=[1,192],$VT=[1,193],$VU=[37,64,65];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Startup":3,"Instructions":4,"EOF":5,"instruction":6,"statIf":7,"statWhile":8,"statDo":9,"statFor":10,"statSwitch":11,"statBreak":12,"statContinue":13,"statConsole":14,"statFunc":15,"statGraph":16,"statCreateVar":17,"statCall":18,"statIncremento":19,"varDefinition":20,"statReturn":21,"varAsig":22,"statArray":23,"unarOpr":24,"RETURN":25,"genExpr":26,";":27,"varArray":28,"LET":29,"ID":30,"=":31,"CONST":32,":":33,"typeVar":34,"subStat":35,"{":36,"}":37,"[":38,"paramsCall":39,"]":40,".":41,"PUSH":42,"(":43,")":44,"POP":45,"GP_TS":46,"IF":47,"moreIf":48,"ELSE":49,"WHILE":50,"DO":51,"FOR":52,"forVariant":53,"VAR":54,"OF":55,"IN":56,"varFor":57,"pasoFor":58,"+":59,"-":60,"SWITCH":61,"swCases":62,"swCase":63,"CASE":64,"DEFAULT":65,"BREAK":66,"CONTINUE":67,"FUNCTION":68,"paramsFunc":69,"typeReturn":70,",":71,"tpf":72,"T_VOID":73,"T_NUMBER":74,"T_BOOLEAN":75,"T_STRING":76,"CONSOLE":77,"LOG":78,"**":79,"*":80,"/":81,"<=":82,">=":83,"<":84,">":85,"==":86,"!=":87,"&&":88,"%":89,"||":90,"otro":91,"NUMBER":92,"DECIMAL":93,"STRING":94,"!":95,"statCall2":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"statCreateVar",19:"statIncremento",25:"RETURN",27:";",29:"LET",30:"ID",31:"=",32:"CONST",33:":",36:"{",37:"}",38:"[",40:"]",41:".",42:"PUSH",43:"(",44:")",45:"POP",46:"GP_TS",47:"IF",49:"ELSE",50:"WHILE",51:"DO",52:"FOR",54:"VAR",55:"OF",56:"IN",59:"+",60:"-",61:"SWITCH",64:"CASE",65:"DEFAULT",66:"BREAK",67:"CONTINUE",68:"FUNCTION",71:",",73:"T_VOID",74:"T_NUMBER",75:"T_BOOLEAN",76:"T_STRING",77:"CONSOLE",78:"LOG",79:"**",80:"*",81:"/",82:"<=",83:">=",84:"<",85:">",86:"==",87:"!=",88:"&&",89:"%",90:"||",92:"NUMBER",93:"DECIMAL",94:"STRING",95:"!"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[21,3],[21,3],[21,2],[20,5],[20,5],[20,3],[20,5],[20,7],[35,3],[28,3],[28,2],[23,7],[23,7],[22,4],[22,4],[16,2],[7,6],[48,2],[48,2],[48,0],[8,5],[9,7],[10,7],[53,4],[53,4],[53,5],[58,3],[58,3],[58,3],[57,4],[57,3],[24,4],[24,4],[11,7],[62,2],[62,1],[63,4],[63,3],[12,2],[13,2],[15,8],[15,6],[69,3],[69,1],[69,0],[72,3],[70,1],[70,1],[70,1],[70,1],[34,1],[34,1],[34,1],[14,7],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,1],[91,3],[91,1],[91,1],[91,1],[91,1],[91,2],[91,1],[96,4],[18,5],[39,3],[39,1],[39,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 58:
this.$=[$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 91: case 98:
 this.$ = $$[$0]; 
break;
case 23:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 24: case 29: case 46: case 47: case 48: case 49: case 50: case 51: case 54: case 55: case 59: case 60:
 this.$ = null; 
break;
case 25:
 this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 26:
this.$ = new Declaration($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 27: case 28: case 30: case 37:
this.$ = null;
break;
case 31:
 this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 32:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 33:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 34: case 35:
 this.$ = $$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 36:
this.$ = new Declaration($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 38:
 this.$ = sr([$$[$0-1],$$[$0]]); 
break;
case 39:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 40: case 41:
 this.$=$$[$0]; 
break;
case 42:
 this.$=null; 
break;
case 43:
 this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 44:
 this.$ = new Dowhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 45:
 this.$ = null 
break;
case 52: case 53: case 56:
 this.$ = null;
break;
case 57:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 61:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 62:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 63:

        this.$ = new Function($$[$0-6], $$[$0], $$[$0-4], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 64:

        this.$ = new Function($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 65:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 66:
 this.$ = [$$[$0]]; 
break;
case 67:
 this.$ = []; 
break;
case 68:
 this.$ = $$[$0-2]; 
break;
case 76:
 this.$ = new Print($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 77:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 78:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 79:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POW, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 80:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.BY, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 81:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 82:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 83:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 84:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 85:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 86:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 87:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 88:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 89:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MOD, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 90:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
 this.$ = $$[$0-1]; 
break;
case 93:
 this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0); 
break;
case 94:
 this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1); 
break;
case 95:
 this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 96:
 this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 97:
 this.$ = new Relational($$[$0-1], $$[$0-1], RelationalOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 99:
 this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 100:
 this.$ = new Call($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 101:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 102:
 this.$=[$$[$0]]; 
break;
case 103:
 this.$=[]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,25:$V2,29:$V3,30:$V4,32:$V5,46:$V6,47:$V7,50:$V8,51:$V9,52:$Va,61:$Vb,66:$Vc,67:$Vd,68:$Ve,77:$Vf},{1:[3]},{5:[1,36],6:37,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,25:$V2,29:$V3,30:$V4,32:$V5,46:$V6,47:$V7,50:$V8,51:$V9,52:$Va,61:$Vb,66:$Vc,67:$Vd,68:$Ve,77:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),o($Vg,[2,21]),o($Vg,[2,22]),{43:[1,38]},{43:[1,39]},{35:40,36:$Vh},{43:[1,42]},{43:[1,43]},{27:[1,44]},{27:[1,45]},{41:[1,46]},{30:[1,47]},{27:[1,48]},{31:[1,50],41:[1,51],43:[1,49],59:[1,52],60:[1,53]},{30:[1,54]},{30:[1,55]},{26:56,27:[1,58],28:57,30:$Vi,38:$Vj,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{1:[2,1]},o($Vg,[2,2]),{26:68,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:69,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{50:[1,70]},{4:71,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,25:$V2,29:$V3,30:$V4,32:$V5,46:$V6,47:$V7,50:$V8,51:$V9,52:$Va,61:$Vb,66:$Vc,67:$Vd,68:$Ve,77:$Vf},{29:[1,75],30:[1,76],53:72,54:[1,73],57:74},{26:77,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},o($Vg,[2,61]),o($Vg,[2,62]),{78:[1,78]},{43:[1,79]},o($Vg,[2,38]),o($Vp,$Vq,{91:59,96:67,39:80,26:81,30:$Vi,43:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo}),{26:82,28:83,30:$Vi,38:$Vj,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{42:[1,84],45:[1,85]},{59:[1,86]},{60:[1,87]},{27:[1,89],31:[1,88],33:[1,90]},{31:[1,91]},{27:[1,92],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},{27:[1,107]},o($Vg,[2,25]),o($VF,[2,91]),{26:81,30:$Vi,39:108,40:[1,109],43:$Vk,71:$Vq,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:110,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},o($VF,[2,93]),o($VF,[2,94]),o($VF,[2,95]),o($VF,[2,96],{43:[1,111]}),{26:112,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},o($VF,[2,98]),{44:[1,113],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},{44:[1,114],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},{43:[1,115]},{6:37,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,25:$V2,29:$V3,30:$V4,32:$V5,37:[1,116],46:$V6,47:$V7,50:$V8,51:$V9,52:$Va,61:$Vb,66:$Vc,67:$Vd,68:$Ve,77:$Vf},{44:[1,117]},{30:[1,118]},{27:[1,119]},{30:[1,120]},{31:[1,121]},{44:[1,122],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},{43:[1,123]},o($Vp,[2,67],{69:124,72:125,30:$VG}),{44:[1,127],71:$VH},o($VI,[2,102],{59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE}),{27:[1,129],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},{27:[1,130]},{43:[1,131]},{43:[1,132]},{27:[1,133]},{27:[1,134]},{26:135,28:136,30:$Vi,38:$Vj,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},o($Vg,[2,28]),{34:137,74:$VJ,75:$VK,76:$VL},{26:141,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},o($Vg,[2,23]),{26:142,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:143,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:144,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:145,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:146,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:147,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:148,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:149,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:150,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:151,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:152,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:153,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:154,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:155,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},o($Vg,[2,24]),{40:[1,156],71:$VH},{27:[2,33]},{44:[1,157],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},o($Vp,$Vq,{91:59,96:67,26:81,39:158,30:$Vi,43:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo}),o($VM,[2,97],{59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE}),{35:159,36:$Vh},{35:160,36:$Vh},{26:161,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},o([5,17,19,25,29,30,32,37,46,47,49,50,51,52,61,64,65,66,67,68,77],[2,31]),{36:[1,162]},{55:[1,163],56:[1,164]},{26:165,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{31:[1,166]},{26:167,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{36:[1,168]},{26:169,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{44:[1,170],71:[1,171]},o($Vp,[2,66]),{33:[1,172]},{27:[1,173]},{26:174,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},o($Vg,[2,36]),o($Vg,[2,37]),{26:175,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{26:176,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},o($Vg,[2,54]),o($Vg,[2,55]),{27:[1,177],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},{27:[1,178]},{31:[1,179]},o($VN,[2,73]),o($VN,[2,74]),o($VN,[2,75]),{27:[1,180],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},o($VO,[2,77],{79:$Vt,80:$Vu,81:$Vv,89:$VD}),o($VO,[2,78],{79:$Vt,80:$Vu,81:$Vv,89:$VD}),o($VM,[2,79],{59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE}),o($VP,[2,80],{79:$Vt,89:$VD}),o($VP,[2,81],{79:$Vt,89:$VD}),o($VQ,[2,82],{59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,89:$VD}),o($VQ,[2,83],{59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,89:$VD}),o($VQ,[2,84],{59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,89:$VD}),o($VQ,[2,85],{59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,89:$VD}),o($VR,[2,86],{59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,89:$VD}),o($VR,[2,87],{59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,89:$VD}),o([27,33,40,44,71,88,90],[2,88],{59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,89:$VD}),o($VM,[2,89],{59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE}),o([27,33,40,44,71,90],[2,90],{59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD}),{27:[2,32]},o($VF,[2,92]),{44:[1,181],71:$VH},o($Vg,[2,42],{48:182,49:[1,183]}),o($Vg,[2,43]),{44:[1,184],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},{4:185,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,25:$V2,29:$V3,30:$V4,32:$V5,46:$V6,47:$V7,50:$V8,51:$V9,52:$Va,61:$Vb,66:$Vc,67:$Vd,68:$Ve,77:$Vf},{30:[1,186]},{30:[1,187]},{27:[1,188],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},{26:189,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{27:[2,53],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},{62:190,63:191,64:$VS,65:$VT},{44:[1,194],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},{33:[1,195],35:196,36:$Vh},{30:$VG,72:197},{34:198,74:$VJ,75:$VK,76:$VL},o($Vg,[2,100]),o($VI,[2,101],{59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE}),{44:[1,199],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},{44:[1,200],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},o($Vg,[2,26]),o($Vg,[2,29]),{26:201,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},o($Vg,[2,27]),o($VF,[2,99]),o($Vg,[2,39]),{7:203,35:202,36:$Vh,47:$V7},{27:[1,204]},{6:37,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,25:$V2,29:$V3,30:$V4,32:$V5,37:[1,205],46:$V6,47:$V7,50:$V8,51:$V9,52:$Va,61:$Vb,66:$Vc,67:$Vd,68:$Ve,77:$Vf},{44:[2,46]},{44:[2,47]},{30:[1,207],58:206},{27:[2,52],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},{37:[1,208],63:209,64:$VS,65:$VT},o($VU,[2,58]),{26:210,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{33:[1,211]},{27:[1,212]},{70:213,73:[1,214],74:[1,215],75:[1,216],76:[1,217]},o($Vg,[2,64]),o($Vp,[2,65]),o($Vp,[2,68]),{27:[1,218]},{27:[1,219]},{27:[1,220],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},o($Vg,[2,40]),o($Vg,[2,41]),o($Vg,[2,44]),o($Vg,[2,45]),{44:[2,48]},{31:[1,223],59:[1,221],60:[1,222]},o($Vg,[2,56]),o($VU,[2,57]),{33:[1,224],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},{4:225,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,25:$V2,29:$V3,30:$V4,32:$V5,46:$V6,47:$V7,50:$V8,51:$V9,52:$Va,61:$Vb,66:$Vc,67:$Vd,68:$Ve,77:$Vf},o($Vg,[2,76]),{35:226,36:$Vh},{36:[2,69]},{36:[2,70]},{36:[2,71]},{36:[2,72]},o($Vg,[2,34]),o($Vg,[2,35]),o($Vg,[2,30]),{59:[1,227]},{60:[1,228]},{26:229,30:$Vi,43:$Vk,91:59,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:67},{4:230,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,25:$V2,29:$V3,30:$V4,32:$V5,46:$V6,47:$V7,50:$V8,51:$V9,52:$Va,61:$Vb,66:$Vc,67:$Vd,68:$Ve,77:$Vf},o($VU,[2,60],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:15,20:17,21:18,22:19,23:20,24:21,6:37,17:$V0,19:$V1,25:$V2,29:$V3,30:$V4,32:$V5,46:$V6,47:$V7,50:$V8,51:$V9,52:$Va,61:$Vb,66:$Vc,67:$Vd,68:$Ve,77:$Vf}),o($Vg,[2,63]),{44:[2,49]},{44:[2,50]},{44:[2,51],59:$Vr,60:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE},o($VU,[2,59],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:15,20:17,21:18,22:19,23:20,24:21,6:37,17:$V0,19:$V1,25:$V2,29:$V3,30:$V4,32:$V5,46:$V6,47:$V7,50:$V8,51:$V9,52:$Va,61:$Vb,66:$Vc,67:$Vd,68:$Ve,77:$Vf})],
defaultActions: {36:[2,1],109:[2,33],156:[2,32],186:[2,46],187:[2,47],206:[2,48],214:[2,69],215:[2,70],216:[2,71],217:[2,72],227:[2,49],228:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Access} = require('../Expression/Access');
    const {Literal} = require('../Expression/Literal');
    const {If} = require('../Instruction/If');
    const {Print} = require('../Instruction/Print');
    const {Statement} = require('../Instruction/Statement');
    const {While} = require('../Instruction/While');
    const {Dowhile} = require('../Instruction/Dowhile');
    const {Declaration} = require('../Instruction/Declaration');
    const {Break} = require('../Instruction/Break');
    const {Continue} = require('../Instruction/Continue');
    const {Call} = require('../Instruction/Call');
    const {Function} = require('../Instruction/Function');
    const {Return} = require('../Instruction/Return');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
break;
case 2:
break;
case 3:return 93
break;
case 4:return 92
break;
case 5:return 94
break;
case 6:return 94
break;
case 7:return 79
break;
case 8:return 80
break;
case 9:return 81
break;
case 10:return 27
break;
case 11:return 71
break;
case 12:return 60
break;
case 13:return 59
break;
case 14:return 41
break;
case 15:return 89
break;
case 16:return 82
break;
case 17:return 83
break;
case 18:return 84
break;
case 19:return 85
break;
case 20:return 86
break;
case 21:return 87
break;
case 22:return 90
break;
case 23:return 88
break;
case 24:return 95
break;
case 25:return 31
break;
case 26:return 33
break;
case 27:return 38
break;
case 28:return 40
break;
case 29:return 43
break;
case 30:return 44 
break;
case 31:return 36
break;
case 32:return 37
break;
case 33:return 47
break;
case 34:return 49
break;
case 35:return 50
break;
case 36:return 'PRINT'
break;
case 37:return 66
break;
case 38:return 51
break;
case 39:return 52
break;
case 40:return 61
break;
case 41:return 64
break;
case 42:return 65
break;
case 43:return 67
break;
case 44:return 25
break;
case 45:return 77
break;
case 46:return 78
break;
case 47:return 68
break;
case 48:return 29
break;
case 49:return 32
break;
case 50:return 54
break;
case 51:return 55
break;
case 52:return 56
break;
case 53:return "T_STRING"
break;
case 54:return "T_NUMBER"
break;
case 55:return "T_BOOLEAN"
break;
case 56:return "T_VOID"
break;
case 57:return "GP_TS"
break;
case 58:return 42
break;
case 59:return 45
break;
case 60:return 30;
break;
case 61:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+)[.]([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(("[^"]*")))/i,/^(?:(('[^"]*')))/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:,)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\.)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?::)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:print\b)/i,/^(?:break\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:function\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:var\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:graficar_ts\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interpreter;
exports.Parser = interpreter.Parser;
exports.parse = function () { return interpreter.parse.apply(interpreter, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
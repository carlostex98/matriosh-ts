/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ast = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,16],$V2=[1,33],$V3=[1,31],$V4=[1,30],$V5=[1,32],$V6=[1,29],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,26],$Ve=[1,28],$Vf=[1,27],$Vg=[5,17,19,23,27,28,30,40,41,43,46,47,48,58,64,65,66,76],$Vh=[1,46],$Vi=[1,59],$Vj=[1,54],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,60],$Vp=[1,82],$Vq=[1,83],$Vr=[1,84],$Vs=[1,85],$Vt=[1,86],$Vu=[1,87],$Vv=[1,88],$Vw=[1,89],$Vx=[1,90],$Vy=[1,91],$Vz=[1,92],$VA=[1,93],$VB=[1,94],$VC=[1,95],$VD=[25,33,38,55,56,62,69,78,79,80,81,82,83,84,85,86,87,88,89],$VE=[1,114],$VF=[5,17,19,23,25,27,28,30,33,38,40,41,43,46,47,48,55,56,58,62,64,65,66,69,76,78,79,80,81,82,83,84,85,86,87,88,89],$VG=[1,116],$VH=[33,38,69],$VI=[25,33,38,62,69],$VJ=[38,69],$VK=[25,33,38,55,56,62,69,81,82,83,84,85,86,87,89],$VL=[25,33,38,55,56,62,69,78,79,81,82,83,84,85,86,87,89],$VM=[25,33,38,62,69,81,82,83,84,85,86,87,89],$VN=[25,33,38,62,69,85,86,87,89],$VO=[1,167],$VP=[1,168],$VQ=[1,173],$VR=[1,174],$VS=[1,175],$VT=[1,176],$VU=[43,61,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Startup":3,"Instructions":4,"EOF":5,"instruction":6,"statIf":7,"statWhile":8,"statDo":9,"statFor":10,"statSwitch":11,"statBreak":12,"statContinue":13,"statConsole":14,"statFunc":15,"statGraph":16,"statCreateVar":17,"statCall":18,"statIncremento":19,"varDefinition":20,"statReturn":21,"varAsig":22,"RETURN":23,"genExpr":24,";":25,"varArray":26,"LET":27,"ID":28,"=":29,"CONST":30,"[":31,"paramsCall":32,"]":33,"statArray":34,".":35,"PUSH":36,"(":37,")":38,"POP":39,"GP_TS":40,"IF":41,"{":42,"}":43,"moreIf":44,"ELSE":45,"WHILE":46,"DO":47,"FOR":48,"forVariant":49,"VAR":50,"OF":51,"IN":52,"varFor":53,"pasoFor":54,"+":55,"-":56,"unarOpr":57,"SWITCH":58,"swCases":59,"swCase":60,"CASE":61,":":62,"DEFAULT":63,"BREAK":64,"CONTINUE":65,"FUNCTION":66,"paramsFunc":67,"typeReturn":68,",":69,"tpf":70,"typeVar":71,"T_VOID":72,"T_NUMBER":73,"T_BOOLEAN":74,"T_STRING":75,"CONSOLE":76,"LOG":77,"*":78,"/":79,"^":80,"<":81,">":82,"<=":83,">=":84,"==":85,"!=":86,"&&":87,"%":88,"||":89,"otro":90,"NUMBER":91,"DECIMAL":92,"STRING":93,"!":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"statCreateVar",19:"statIncremento",23:"RETURN",25:";",27:"LET",28:"ID",29:"=",30:"CONST",31:"[",33:"]",35:".",36:"PUSH",37:"(",38:")",39:"POP",40:"GP_TS",41:"IF",42:"{",43:"}",45:"ELSE",46:"WHILE",47:"DO",48:"FOR",50:"VAR",51:"OF",52:"IN",55:"+",56:"-",58:"SWITCH",61:"CASE",62:":",63:"DEFAULT",64:"BREAK",65:"CONTINUE",66:"FUNCTION",69:",",72:"T_VOID",73:"T_NUMBER",74:"T_BOOLEAN",75:"T_STRING",76:"CONSOLE",77:"LOG",78:"*",79:"/",80:"^",81:"<",82:">",83:"<=",84:">=",85:"==",86:"!=",87:"&&",88:"%",89:"||",91:"NUMBER",92:"DECIMAL",93:"STRING",94:"!"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[21,3],[21,3],[21,2],[20,5],[20,5],[20,3],[20,5],[26,3],[26,2],[34,7],[34,7],[22,4],[22,4],[16,2],[7,8],[44,4],[44,2],[44,0],[8,7],[9,9],[10,7],[49,4],[49,4],[49,5],[54,3],[54,3],[54,3],[53,4],[53,3],[57,4],[57,4],[11,7],[59,2],[59,1],[60,6],[60,5],[12,2],[13,2],[15,10],[15,9],[67,3],[67,1],[70,3],[68,1],[68,1],[68,1],[68,1],[71,1],[71,1],[71,1],[14,7],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,1],[90,3],[90,1],[90,1],[90,1],[90,1],[90,2],[90,1],[18,3],[18,4],[32,3],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return makeReport($$[$0-1]);
    
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 54: case 97:
this.$=[$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 86:
 this.$ = $$[$0]; 
break;
case 21: case 22:
 this.$ = nuevoNodo("RETURN"); creaRelaciones(nx, [$$[$0-1]]);
break;
case 23:
 this.$ = nuevoNodo("RETURN"); 
break;
case 24: case 27:
 this.$ = nuevoNodo("VAR"); creaRelaciones(nx, [nuevoNodo($$[$0-3]), nuevoNodo("="), $$[$0-1]]);
break;
case 25:
 this.$ = nuevoNodo("CONST"); creaRelaciones(nx, [nuevoNodo($$[$0-3]), nuevoNodo("="), $$[$0-1]]); 
break;
case 26:
 this.$ = nuevoNodo("VAR"); creaRelaciones(nx, [nuevoNodo($$[$0-1])]);
break;
case 28:
 this.$ = nuevoNodo("ARRAY"); creaRelaciones(nx, $$[$0-1]);
break;
case 29:
 this.$ = [nuevoNodo("[]")]; 
break;
case 30:
 this.$ = nuevoNodo("PUSH"); creaRelaciones(nx, [nuevoNodo($$[$0-6]), $$[$0-2]]);
break;
case 31:
 this.$ = nuevoNodo("POP"); creaRelaciones(nx, [nuevoNodo($$[$0-6]), $$[$0-2]]);
break;
case 32: case 33:
this.$ = nuevoNodo("VAR"); creaRelaciones(nx, [nuevoNodo($$[$0-3]), nuevoNodo("="), $$[$0-1]]);
break;
case 34:
 this.$ = nuevoNodo("SYMBOL"); 
break;
case 35:

        this.$=nuevoNodo("IF"); 
        aux3=nx; 
        creaRelaciones(aux3, [nuevoNodo("INSTR")]); 
        creaRelaciones(nx, $$[$0-2]);
        creaRelaciones(aux3, [nuevoNodo("LOGIC")]);
        creaRelaciones(nx, [$$[$0-5]]);
        creaRelaciones(aux3, [nuevoNodo("EXT")]);
        creaRelaciones(nx, [$$[$0]]);
    
break;
case 36:
this.$=nuevoNodo("ELSE"); creaRelaciones(nx, [nuevoNodo("INSTR")]); creaRelaciones(nx, $$[$0-1]);
break;
case 37:
this.$=nuevoNodo("ELSE-IF"); creaRelaciones(nx, [$$[$0]]);
break;
case 39:

        this.$=nuevoNodo("WHILE"); 
        aux3=nx; 
        creaRelaciones(aux3, [nuevoNodo("INSTR")]); 
        creaRelaciones(nx, $$[$0-1]);
        creaRelaciones(aux3, [nuevoNodo("LOGIC")]);
        creaRelaciones(nx, [$$[$0-4]]);
    
break;
case 40:

        this.$=nuevoNodo("DO WHILE"); 
        aux3=nx; 
        creaRelaciones(aux3, [nuevoNodo("INSTR")]); 
        creaRelaciones(nx, $$[$0-6]);
        creaRelaciones(aux3, [nuevoNodo("LOGIC")]);
        creaRelaciones(nx, [$$[$0-2]]);
    
break;
case 41:
 
        this.$=nuevoNodo("FOR"); aux3=nx; 
        creaRelaciones(nx, [$$[$0-4]]);  
        creaRelaciones(aux3, [nuevoNodo("INSTR")]); 
        creaRelaciones(nx, $$[$0-1]);
    
break;
case 42:
 this.$ = nuevoNodo("STEP"); creaRelaciones(nx,[nuevoNodo($$[$0-2]), nuevoNodo("OF"), nuevoNodo($$[$0])]);
break;
case 43:
 this.$ = nuevoNodo("STEP"); creaRelaciones(nx,[nuevoNodo($$[$0-2]), nuevoNodo("IN"), nuevoNodo($$[$0])]); 
break;
case 44:
 this.$ = nuevoNodo("LOGIC"); creaRelaciones(nx, [$$[$0-4], $$[$0-2], $$[$0]]);
break;
case 45:
 this.$ = nuevoNodo("INCR: "+ $$[$0-2]); 
break;
case 46:
 this.$ = nuevoNodo("DECR: "+ $$[$0-2]);
break;
case 47:
 this.$ = nuevoNodo("STEP"); creaRelaciones(nx, [$$[$0-2], nuevoNodo("="), $$[$0]]); 
break;
case 48:
 this.$ = nuevoNodo("VAR"); creaRelaciones(nx, [nuevoNodo($$[$0-2]), nuevoNodo("="), $$[$0]]);
break;
case 49:
 this.$ = nuevoNodo("VAR"); creaRelaciones(nx, [nuevoNodo($$[$0-2]),, nuevoNodo("="), $$[$0]]); 
break;
case 50:
 this.$ = nuevoNodo("INCR: "+ $$[$0-3]); 
break;
case 51:
 this.$ = nuevoNodo("DECR: "+ $$[$0-3]); 
break;
case 52:

        this.$ = nuevoNodo("SWITCH");
        aux2 = nx;
        creaRelaciones(nx, [nuevoNodo("VALOR")]); 
        creaRelaciones(nx, [$$[$0-4]]);
        creaRelaciones(aux2,nuevoNodo("CASES"));
        creaRelaciones(nx, $$[$0-2]);
    
break;
case 53:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 55:
 
        this.$ = nuevoNodo("CASE"); 
        aux2 = nx;
        creaRelaciones(nx, [nuevoNodo("VALOR")]); 
        creaRelaciones(nx, [$$[$0-4]]);
        creaRelaciones(aux2,nuevoNodo("INSTR"));
        creaRelaciones(nx, $$[$0-1]);
    
break;
case 56:
 this.$ = nuevoNodo("DEFAULT"); creaRelaciones(nx, $$[$0-1]);
break;
case 57:
 this.$ = nuevoNodo("BREAK"); 
break;
case 58:
 this.$ = nuevoNodo("CONTINUE"); 
break;
case 59:
 
            this.$=nuevoNodo("FUNC"); 
            let aux1 = nx;
            creaRelaciones(aux1, [nuevoNodo("NOMB: "+$$[$0-8]) ]);
            creaRelaciones(aux1, [nuevoNodo("PARAMS") ]);
            creaRelaciones(nx, $$[$0-6]);
            creaRelaciones(aux1, [nuevoNodo("RETURN: "+ $$[$0-3]) ]);
            creaRelaciones(aux1, nuevoNodo("INSTR"));
            creaRelaciones(nx, $$[$0-1]);
            
        
break;
case 60:

            this.$=nuevoNodo("FUNC"); 
            aux1 = nx;
            creaRelaciones(aux1, [nuevoNodo("NOMB: "+$$[$0-7]) ]);
            creaRelaciones(aux1, [nuevoNodo("RETURN: "+ $$[$0-3]) ]);
            creaRelaciones(aux1, nuevoNodo("INSTR"));
            creaRelaciones(nx, $$[$0-1]);
        
break;
case 61: case 96:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 62:
 this.$ = [$$[$0]]; 
break;
case 63:
 this.$ = nuevoNodo("TYPE"); creaRelaciones(nx, [nuevoNodo($$[$0-2]), nuevoNodo($$[$0])]); 
break;
case 71:
 this.$=nuevoNodo("PRINT"); creaRelaciones(nx, [$$[$0-2]]);
break;
case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85:
 this.$ = nuevoNodo("EXPR"); creaRelaciones(nx, [$$[$0-2], nuevoNodo($$[$0-1]), $$[$0]]); 
break;
case 87:
 this.$ = nuevoNodo("PAR"); creaRelaciones(nx,[nuevoNodo("("),$$[$0-1]],nuevoNodo(')')); 
break;
case 88: case 89:
 this.$ = nuevoNodo($$[$0]+" (val)"); 
break;
case 90:
 this.$ = nuevoNodo($$[$0]+" (val)");
break;
case 91:
 this.$ = nuevoNodo($$[$0]+" (ID)"); 
break;
case 92:
 this.$ = nuevoNodo("NOT"); creaRelaciones(nx,[$$[$0]]);
break;
case 93:
 this.$ = nuevoNodo("CALL"); creaRelaciones(nx,[$$[$0]]); 
break;
case 94:
 this.$ = nuevoNodo($$[$0-2]); 
break;
case 95:
 this.$ = [nuevoNodo($$[$0-3]), nuevoNodo("PARAMS")]; creaRelaciones(nx, $$[$0-1])
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{1:[3]},{5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),{37:[1,36]},{37:[1,37]},{42:[1,38]},{37:[1,39]},{37:[1,40]},{25:[1,41]},{25:[1,42]},{35:[1,43]},{28:[1,44]},{25:[1,45]},{29:[1,47],37:$Vh},{28:[1,48]},{28:[1,49]},{18:61,24:50,25:[1,52],26:51,28:$Vi,31:$Vj,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{1:[2,1]},o($Vg,[2,2]),{18:61,24:62,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:63,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{4:64,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{27:[1,68],28:[1,69],49:65,50:[1,66],53:67},{18:61,24:70,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},o($Vg,[2,57]),o($Vg,[2,58]),{77:[1,71]},{37:[1,72]},o($Vg,[2,34]),{18:61,24:75,28:$Vi,32:74,37:$Vk,38:[1,73],90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:76,26:77,28:$Vi,31:$Vj,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{25:[1,79],29:[1,78]},{29:[1,80]},{25:[1,81],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},{25:[1,96]},o($Vg,[2,23]),o($VD,[2,86]),{18:61,24:75,28:$Vi,32:97,33:[1,98],37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:99,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},o($VD,[2,88]),o($VD,[2,89]),o($VD,[2,90]),o($VD,[2,91],{37:$Vh}),{18:61,24:100,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},o($VD,[2,93]),{38:[1,101],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},{38:[1,102],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,43:[1,103],46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{38:[1,104]},{28:[1,105]},{25:[1,106]},{28:[1,107]},{29:[1,108]},{38:[1,109],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},{37:[1,110]},{28:$VE,38:[1,112],67:111,70:113},o($VF,[2,94]),{38:[1,115],69:$VG},o($VH,[2,97],{55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC}),{25:[1,117],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},{25:[1,118]},{18:61,24:119,26:120,28:$Vi,31:$Vj,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},o($Vg,[2,26]),{18:61,24:121,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},o($Vg,[2,21]),{18:61,24:122,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:123,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:124,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:125,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:126,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:127,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:128,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:129,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:130,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:131,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:132,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:133,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:134,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{18:61,24:135,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},o($Vg,[2,22]),{33:[1,136],69:$VG},{25:[2,29]},{38:[1,137],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},o($VI,[2,92],{55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC}),{42:[1,138]},{42:[1,139]},{46:[1,140]},{42:[1,141]},{51:[1,142],52:[1,143]},{18:61,24:144,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{29:[1,145]},{18:61,24:146,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{42:[1,147]},{18:61,24:148,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{38:[1,149],69:[1,150]},{62:[1,151]},o($VJ,[2,62]),{62:[1,152]},o($VF,[2,95]),{18:61,24:153,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},o($Vg,[2,32]),o($Vg,[2,33]),{25:[1,154],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},{25:[1,155]},{25:[1,156],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},o($VK,[2,72],{78:$Vr,79:$Vs,80:$Vt,88:$VB}),o($VK,[2,73],{78:$Vr,79:$Vs,80:$Vt,88:$VB}),o($VL,[2,74],{80:$Vt,88:$VB}),o($VL,[2,75],{80:$Vt,88:$VB}),o($VI,[2,76],{55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC}),o($VM,[2,77],{55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,88:$VB}),o($VM,[2,78],{55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,88:$VB}),o($VM,[2,79],{55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,88:$VB}),o($VM,[2,80],{55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,88:$VB}),o($VN,[2,81],{55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,88:$VB}),o($VN,[2,82],{55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,88:$VB}),o([25,33,38,62,69,87,89],[2,83],{55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VB}),o($VI,[2,84],{55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC}),o([25,33,38,62,69,89],[2,85],{55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB}),{25:[2,28]},o($VD,[2,87]),{4:157,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{4:158,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{37:[1,159]},{4:160,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{28:[1,161]},{28:[1,162]},{25:[1,163],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},{18:61,24:164,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{25:[2,49],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},{59:165,60:166,61:$VO,63:$VP},{38:[1,169],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},{62:[1,170]},{28:$VE,70:171},{68:172,72:$VQ,73:$VR,74:$VS,75:$VT},{71:177,73:[1,178],74:[1,179],75:[1,180]},o($VH,[2,96],{55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC}),o($Vg,[2,24]),o($Vg,[2,27]),o($Vg,[2,25]),{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,43:[1,181],46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,43:[1,182],46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{18:61,24:183,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,43:[1,184],46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{38:[2,42]},{38:[2,43]},{28:[1,186],54:185},{25:[2,48],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},{43:[1,187]},{43:[2,54],59:188,60:166,61:$VO,63:$VP},{18:61,24:189,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{62:[1,190]},{25:[1,191]},{68:192,72:$VQ,73:$VR,74:$VS,75:$VT},o($VJ,[2,61]),{42:[1,193]},{42:[2,64]},{42:[2,65]},{42:[2,66]},{42:[2,67]},o($VJ,[2,63]),o($VJ,[2,68]),o($VJ,[2,69]),o($VJ,[2,70]),o($Vg,[2,38],{44:194,45:[1,195]}),o($Vg,[2,39]),{38:[1,196],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},o($Vg,[2,41]),{38:[2,44]},{29:[1,199],55:[1,197],56:[1,198]},o($Vg,[2,52]),{43:[2,53]},{55:$Vp,56:$Vq,62:[1,200],78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},{42:[1,201]},o($Vg,[2,71]),{42:[1,202]},{4:203,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},o($Vg,[2,35]),{7:205,41:$V7,42:[1,204]},{25:[1,206]},{55:[1,207]},{56:[1,208]},{18:61,24:209,28:$Vi,37:$Vk,90:53,91:$Vl,92:$Vm,93:$Vn,94:$Vo},{42:[1,210]},{4:211,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{4:212,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,43:[1,213],46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{4:214,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},o($Vg,[2,37]),o($Vg,[2,40]),{38:[2,45]},{38:[2,46]},{38:[2,47],55:$Vp,56:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC},{4:215,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,43:[1,216],46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,43:[1,217],46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},o($Vg,[2,60]),{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,43:[1,218],46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,27:$V3,28:$V4,30:$V5,40:$V6,41:$V7,43:[1,219],46:$V8,47:$V9,48:$Va,58:$Vb,64:$Vc,65:$Vd,66:$Ve,76:$Vf},o($VU,[2,56]),o($Vg,[2,59]),o($Vg,[2,36]),o($VU,[2,55])],
defaultActions: {34:[2,1],98:[2,29],136:[2,28],161:[2,42],162:[2,43],173:[2,64],174:[2,65],175:[2,66],176:[2,67],185:[2,44],188:[2,53],207:[2,45],208:[2,46]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    let nodos = [];
    let relacion = [];
    let nx = 0;
    let aux1 = 0;
    let aux2 = 0;
    let aux3 = 0;
    function nuevoNodo(contenido){
        nx++;
        var tt = "nodo"+nx.toString()+'[ label=\"'+contenido+ '\"]; \n' ;
        nodos.push(tt);
        return nx;
    }

    function creaRelaciones(padre, hijos){
        for (i = 0; i < hijos.length; i++) {
            relacion.push("nodo"+padre.toString()+" -> nodo"+hijos[i].toString()+"; \n");
        }
    }

    function makeReport(k){
        let g = nuevoNodo("MAIN PROGRAM");
        creaRelaciones(g, k);
        let rs = "digraph G { \n";
        for (i = 0; i < nodos.length; i++) {
            rs+=nodos[i];
        }
        for (i = 0; i < relacion.length; i++) {
            rs+=relacion[i];
        }
        rs+= "}";
        nodos = [];
        relacion = [];
        return rs;
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
break;
case 2:
break;
case 3:return 91
break;
case 4:return 92
break;
case 5:return 93
break;
case 6:return 93
break;
case 7:return 78
break;
case 8:return 79
break;
case 9:return 25
break;
case 10:return 69
break;
case 11:return 56
break;
case 12:return 55
break;
case 13:return 80
break;
case 14:return 35
break;
case 15:return 88
break;
case 16:return 81
break;
case 17:return 82
break;
case 18:return 83
break;
case 19:return 84
break;
case 20:return 85
break;
case 21:return 86
break;
case 22:return 89
break;
case 23:return 87
break;
case 24:return 94
break;
case 25:return 29
break;
case 26:return 62
break;
case 27:return 31
break;
case 28:return 33
break;
case 29:return 37
break;
case 30:return 38 
break;
case 31:return 42
break;
case 32:return 43
break;
case 33:return 41
break;
case 34:return 45
break;
case 35:return 46
break;
case 36:return 'PRINT'
break;
case 37:return 64
break;
case 38:return 47
break;
case 39:return 48
break;
case 40:return 58
break;
case 41:return 61
break;
case 42:return 63
break;
case 43:return 65
break;
case 44:return 23
break;
case 45:return 76
break;
case 46:return 77
break;
case 47:return 66
break;
case 48:return 27
break;
case 49:return 30
break;
case 50:return 50
break;
case 51:return 51
break;
case 52:return 52
break;
case 53:return "T_STRING"
break;
case 54:return "T_NUMBER"
break;
case 55:return "T_BOOLEAN"
break;
case 56:return "T_VOID"
break;
case 57:return "GP_TS"
break;
case 58:return 36
break;
case 59:return 39
break;
case 60:return 28;
break;
case 61:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+))/i,/^(?:({entero}\.{entero}))/i,/^(?:(("[^"]*")))/i,/^(?:(('[^"]*')))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:,)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:%)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?::)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:print\b)/i,/^(?:break\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:function\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:var\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:graficar_ts\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ast;
exports.Parser = ast.Parser;
exports.parse = function () { return ast.parse.apply(ast, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
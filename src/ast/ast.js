/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ast = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,14],$V2=[1,16],$V3=[1,34],$V4=[1,32],$V5=[1,31],$V6=[1,33],$V7=[1,30],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,26],$Ve=[1,27],$Vf=[1,29],$Vg=[1,28],$Vh=[2,5,17,20,24,26,27,29,32,33,37,40,41,42,49,52,53,54,55,56,65],$Vi=[1,49],$Vj=[1,60],$Vk=[1,56],$Vl=[1,61],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,62],$Vq=[1,84],$Vr=[1,85],$Vs=[1,86],$Vt=[1,87],$Vu=[1,88],$Vv=[1,89],$Vw=[1,90],$Vx=[1,91],$Vy=[1,92],$Vz=[1,93],$VA=[1,94],$VB=[1,95],$VC=[1,96],$VD=[1,97],$VE=[19,30,35,46,47,58,68,69,70,71,72,73,74,75,76,77,78,79],$VF=[1,113],$VG=[35,58],$VH=[1,119],$VI=[1,120],$VJ=[1,121],$VK=[19,30,35,46,47,58,71,72,73,74,75,76,77,79],$VL=[19,30,35,58],$VM=[28,35,58],$VN=[19,30,35,46,47,58,69,70,71,72,73,74,75,76,77,79],$VO=[19,30,35,58,71,72,73,74,75,76,77,79],$VP=[19,30,35,58,75,76,77,79],$VQ=[1,165],$VR=[1,166],$VS=[37,52,53];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Startup":3,"Instructions":4,"EOF":5,"instruction":6,"statIf":7,"statWhile":8,"statDo":9,"statFor":10,"statSwitch":11,"statBreak":12,"statContinue":13,"statConsole":14,"statFunc":15,"statGraph":16,"statCreateVar":17,"statCall":18,";":19,"statIncremento":20,"varDefinition":21,"statReturn":22,"varAsig":23,"RETURN":24,"genExpr":25,"LET":26,"ID":27,"=":28,"CONST":29,":":30,"typeVar":31,"GP_TS":32,"IF":33,"(":34,")":35,"{":36,"}":37,"moreIf":38,"ELSE":39,"WHILE":40,"DO":41,"FOR":42,"forVariant":43,"varFor":44,"pasoFor":45,"+":46,"-":47,"unarOpr":48,"SWITCH":49,"swCases":50,"swCase":51,"CASE":52,"DEFAULT":53,"BREAK":54,"CONTINUE":55,"FUNCTION":56,"paramsFunc":57,",":58,"tpf":59,"typeReturn":60,"T_VOID":61,"T_NUMBER":62,"T_BOOLEAN":63,"T_STRING":64,"CONSOLE":65,".":66,"LOG":67,"**":68,"*":69,"/":70,"<=":71,">=":72,"<":73,">":74,"==":75,"!=":76,"&&":77,"%":78,"||":79,"otro":80,"NUMBER":81,"DECIMAL":82,"STRING":83,"!":84,"paramsCall":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"statCreateVar",19:";",20:"statIncremento",24:"RETURN",26:"LET",27:"ID",28:"=",29:"CONST",30:":",32:"GP_TS",33:"IF",34:"(",35:")",36:"{",37:"}",39:"ELSE",40:"WHILE",41:"DO",42:"FOR",46:"+",47:"-",49:"SWITCH",52:"CASE",53:"DEFAULT",54:"BREAK",55:"CONTINUE",56:"FUNCTION",58:",",61:"T_VOID",62:"T_NUMBER",63:"T_BOOLEAN",64:"T_STRING",65:"CONSOLE",66:".",67:"LOG",68:"**",69:"*",70:"/",71:"<=",72:">=",73:"<",74:">",75:"==",76:"!=",77:"&&",78:"%",79:"||",81:"NUMBER",82:"DECIMAL",83:"STRING",84:"!"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[22,3],[22,2],[21,5],[21,5],[21,7],[21,7],[21,3],[23,4],[16,2],[7,8],[38,4],[38,2],[38,0],[8,7],[9,9],[10,7],[43,5],[45,3],[45,3],[45,3],[44,4],[44,3],[48,4],[48,4],[11,7],[50,2],[50,1],[51,4],[51,3],[12,2],[13,2],[15,8],[15,7],[57,3],[57,1],[59,3],[60,1],[60,1],[60,1],[60,1],[31,1],[31,1],[31,1],[14,7],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,1],[80,3],[80,1],[80,1],[80,1],[80,1],[80,2],[80,2],[80,1],[18,3],[18,4],[85,3],[85,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return makeReport($$[$0-1]);
    
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 48: case 92:
this.$=[$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 17: case 18: case 19: case 20: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 80:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = $$[$0-1]; 
break;
case 21:
/*errorcillo*/
break;
case 22:
 this.$ = nuevoNodo("RETURN"); creaRelaciones(nx, [$$[$0-1]]);
break;
case 23:
 this.$ = nuevoNodo("RETURN"); 
break;
case 24:
 this.$ = nuevoNodo("VAR"); creaRelaciones(nx, [nuevoNodo($$[$0-3]), nuevoNodo("="), $$[$0-1]]);
break;
case 25:
 this.$ = nuevoNodo("CONST"); creaRelaciones(nx, [nuevoNodo($$[$0-3]), nuevoNodo("="), $$[$0-1]]); 
break;
case 26:
 this.$ = nuevoNodo("VAR"); creaRelaciones(nx, [nuevoNodo($$[$0-5]), nuevoNodo("="), $$[$0-1]]);
break;
case 27:
 this.$ = nuevoNodo("CONST"); creaRelaciones(nx, [nuevoNodo($$[$0-5]), nuevoNodo("="), $$[$0-1]]); 
break;
case 28:
 this.$ = nuevoNodo("VAR"); creaRelaciones(nx, [nuevoNodo($$[$0-1])]);
break;
case 29:
this.$ = nuevoNodo("VAR"); creaRelaciones(nx, [nuevoNodo($$[$0-3]), nuevoNodo("="), $$[$0-1]]);
break;
case 30:
 this.$ = nuevoNodo("SYMBOL"); 
break;
case 31:

        this.$=nuevoNodo("IF"); 
        aux3=nx; 
        creaRelaciones(aux3, [nuevoNodo("INSTR")]); 
        creaRelaciones(nx, $$[$0-2]);
        creaRelaciones(aux3, [nuevoNodo("LOGIC")]);
        creaRelaciones(nx, [$$[$0-5]]);
        if($$[$0]!=null){
            creaRelaciones(aux3, [nuevoNodo("EXT")]);
            creaRelaciones(nx, [$$[$0]]);
        }
        
    
break;
case 32:
this.$=nuevoNodo("ELSE"); creaRelaciones(nx, [nuevoNodo("INSTR")]); creaRelaciones(nx, $$[$0-1]);
break;
case 33:
this.$=nuevoNodo("ELSE-IF"); creaRelaciones(nx, [$$[$0]]);
break;
case 34:
this.$=null;
break;
case 35:

        this.$=nuevoNodo("WHILE"); 
        aux3=nx; 
        creaRelaciones(aux3, [nuevoNodo("INSTR")]); 
        creaRelaciones(nx, $$[$0-1]);
        creaRelaciones(aux3, [nuevoNodo("LOGIC")]);
        creaRelaciones(nx, [$$[$0-4]]);
    
break;
case 36:

        this.$=nuevoNodo("DO WHILE"); 
        aux3=nx; 
        creaRelaciones(aux3, [nuevoNodo("INSTR")]); 
        creaRelaciones(nx, $$[$0-6]);
        creaRelaciones(aux3, [nuevoNodo("LOGIC")]);
        creaRelaciones(nx, [$$[$0-2]]);
    
break;
case 37:
 
        this.$=nuevoNodo("FOR"); aux3=nx; 
        creaRelaciones(nx, [$$[$0-4]]);  
        creaRelaciones(aux3, [nuevoNodo("INSTR")]); 
        creaRelaciones(nx, $$[$0-1]);
    
break;
case 38:
 this.$ = nuevoNodo("LOGIC"); creaRelaciones(nx, [$$[$0-4], $$[$0-2], $$[$0]]);
break;
case 39:
 this.$ = nuevoNodo("INCR: "+ $$[$0-2]); 
break;
case 40:
 this.$ = nuevoNodo("DECR: "+ $$[$0-2]);
break;
case 41:
 this.$ = nuevoNodo("STEP"); creaRelaciones(nx, [nuevoNodo($$[$0-2]), nuevoNodo("="), $$[$0]]); 
break;
case 42:
 this.$ = nuevoNodo("VAR"); creaRelaciones(nx, [nuevoNodo($$[$0-2]), nuevoNodo("="), $$[$0]]);
break;
case 43:
 this.$ = nuevoNodo("VAR"); creaRelaciones(nx, [nuevoNodo($$[$0-2]), nuevoNodo("="), $$[$0]]); 
break;
case 44:
 this.$ = nuevoNodo("INCR: "+ $$[$0-3]); 
break;
case 45:
 this.$ = nuevoNodo("DECR: "+ $$[$0-3]); 
break;
case 46:

        this.$ = nuevoNodo("SWITCH");
        aux2 = nx;
        creaRelaciones(nx, [nuevoNodo("VALOR")]); 
        creaRelaciones(nx, [$$[$0-4]]);
        creaRelaciones(aux2,nuevoNodo("CASES"));
        creaRelaciones(nx, $$[$0-2]);
    
break;
case 47:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 49:
 
        this.$ = nuevoNodo("CASE"); 
        aux2 = nx;
        creaRelaciones(nx, [nuevoNodo("VALOR")]); 
        creaRelaciones(nx, [$$[$0-2]]);
        creaRelaciones(aux2,nuevoNodo("INSTR"));
        creaRelaciones(nx, $$[$0]);
    
break;
case 50:
 this.$ = nuevoNodo("DEFAULT"); creaRelaciones(nx, $$[$0]);
break;
case 51:
 this.$ = nuevoNodo("BREAK"); 
break;
case 52:
 this.$ = nuevoNodo("CONTINUE"); 
break;
case 53:
 
            this.$=nuevoNodo("FUNC"); 
            let aux1 = nx;
            creaRelaciones(aux1, [nuevoNodo("NOMB: "+$$[$0-6]) ]);
            creaRelaciones(aux1, [nuevoNodo("PARAMS")]);
            creaRelaciones(nx, $$[$0-4]);
            creaRelaciones(aux1, [nuevoNodo("INSTR")]);
            creaRelaciones(nx, $$[$0-1]);
            
        
break;
case 54:

            this.$=nuevoNodo("FUNC"); 
            aux1 = nx;
            creaRelaciones(aux1, [nuevoNodo("NOMB: "+$$[$0-5]) ]);
            creaRelaciones(aux1, [nuevoNodo("INSTR")]);
            creaRelaciones(nx, $$[$0-1]);
        
break;
case 55: case 91:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 56:
 this.$ = [$$[$0]]; 
break;
case 57:
 this.$ = nuevoNodo("TYPE"); creaRelaciones(nx, [nuevoNodo($$[$0-2]), nuevoNodo($$[$0])]); 
break;
case 65:
 this.$=nuevoNodo("PRINT"); creaRelaciones(nx, [$$[$0-2]]);
break;
case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79:
 this.$ = nuevoNodo("EXPR"); creaRelaciones(nx, [$$[$0-2], nuevoNodo($$[$0-1]), $$[$0]]); 
break;
case 81:
 this.$ = nuevoNodo("PAR"); creaRelaciones(nx,[nuevoNodo("("),$$[$0-1],nuevoNodo(')')]); 
break;
case 82: case 83:
 this.$ = nuevoNodo($$[$0]+" (val)"); 
break;
case 84:
 this.$ = nuevoNodo($$[$0].substr(1,$$[$0].length-2)+" (val)");
break;
case 85:
 this.$ = nuevoNodo($$[$0]+" (ID)"); 
break;
case 86:
 this.$ = nuevoNodo("MENOS"); creaRelaciones(nx,[$$[$0]]); 
break;
case 87:
 this.$ = nuevoNodo("NOT"); creaRelaciones(nx,[$$[$0]]);
break;
case 88:
 this.$ = nuevoNodo("CALL"); creaRelaciones(nx,[$$[$0]]); 
break;
case 89:
 this.$ = nuevoNodo("Call: "+$$[$0-2]); 
break;
case 90:
 this.$ = nuevoNodo("Call: "+$$[$0-3]); creaRelaciones(nx, $$[$0-1]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},{1:[3]},{2:$V0,5:[1,35],6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),{19:[1,37]},o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),{19:[1,38]},{34:[1,39]},{34:[1,40]},{36:[1,41]},{34:[1,42]},{34:[1,43]},{19:[1,44]},{19:[1,45]},{66:[1,46]},{27:[1,47]},{19:[1,48]},{28:[1,50],34:$Vi},{27:[1,51]},{27:[1,52]},{18:63,19:[1,54],25:53,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,16]),o($Vh,[2,21]),{18:63,25:64,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:65,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{2:$V0,4:66,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},{26:[1,69],27:[1,70],43:67,44:68},{18:63,25:71,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},o($Vh,[2,51]),o($Vh,[2,52]),{67:[1,72]},{34:[1,73]},o($Vh,[2,30]),{18:63,25:76,27:$Vj,34:$Vk,35:[1,74],47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:75},{18:63,25:77,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{19:[1,80],28:[1,78],30:[1,79]},{28:[1,81],30:[1,82]},{19:[1,83],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},o($Vh,[2,23]),o($VE,[2,80]),{18:63,25:98,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},o($VE,[2,82]),o($VE,[2,83]),o($VE,[2,84]),o($VE,[2,85],{34:$Vi}),{18:63,25:99,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:100,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},o($VE,[2,88]),{35:[1,101],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{35:[1,102],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,37:[1,103],40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},{35:[1,104]},{19:[1,105]},{27:[1,106]},{28:[1,107]},{35:[1,108],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{34:[1,109]},{27:$VF,35:[1,111],57:110,59:112},o($VE,[2,89]),{35:[1,114],58:[1,115]},o($VG,[2,92],{46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),{19:[1,116],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{18:63,25:117,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{31:118,62:$VH,63:$VI,64:$VJ},o($Vh,[2,28]),{18:63,25:122,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{31:123,62:$VH,63:$VI,64:$VJ},o($Vh,[2,22]),{18:63,25:124,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:125,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:126,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:127,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:128,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:129,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:130,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:131,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:132,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:133,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:134,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:135,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:136,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{18:63,25:137,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{35:[1,138],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},o($VK,[2,86],{68:$Vs,69:$Vt,70:$Vu,78:$VC}),o($VL,[2,87],{46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),{36:[1,139]},{36:[1,140]},{40:[1,141]},{36:[1,142]},{18:63,25:143,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{28:[1,144]},{18:63,25:145,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{36:[1,146]},{18:63,25:147,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{35:[1,148],58:[1,149]},{36:[1,150]},o($VG,[2,56]),{30:[1,151]},o($VE,[2,90]),{18:63,25:152,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},o($Vh,[2,29]),{19:[1,153],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{28:[1,154]},o($VM,[2,62]),o($VM,[2,63]),o($VM,[2,64]),{19:[1,155],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{28:[1,156]},o($VK,[2,66],{68:$Vs,69:$Vt,70:$Vu,78:$VC}),o($VK,[2,67],{68:$Vs,69:$Vt,70:$Vu,78:$VC}),o($VL,[2,68],{46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),o($VN,[2,69],{68:$Vs,78:$VC}),o($VN,[2,70],{68:$Vs,78:$VC}),o($VO,[2,71],{46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,78:$VC}),o($VO,[2,72],{46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,78:$VC}),o($VO,[2,73],{46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,78:$VC}),o($VO,[2,74],{46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,78:$VC}),o($VP,[2,75],{46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,78:$VC}),o($VP,[2,76],{46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,78:$VC}),o([19,30,35,58,77,79],[2,77],{46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,78:$VC}),o($VL,[2,78],{46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),o([19,30,35,58,79],[2,79],{46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),o($VE,[2,81]),{2:$V0,4:157,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},{2:$V0,4:158,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},{34:[1,159]},{2:$V0,4:160,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},{19:[1,161],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{18:63,25:162,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{19:[2,43],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{50:163,51:164,52:$VQ,53:$VR},{35:[1,167],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{36:[1,168]},{27:$VF,59:169},{2:$V0,4:170,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},{31:171,62:$VH,63:$VI,64:$VJ},o($VG,[2,91],{46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),o($Vh,[2,24]),{18:63,25:172,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},o($Vh,[2,25]),{18:63,25:173,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,37:[1,174],40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,37:[1,175],40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},{18:63,25:176,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,37:[1,177],40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},{27:[1,179],45:178},{19:[2,42],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{37:[1,180]},{37:[2,48],50:181,51:164,52:$VQ,53:$VR},{18:63,25:182,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{30:[1,183]},{19:[1,184]},{2:$V0,4:185,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},o($VG,[2,55]),{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,37:[1,186],40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},o($VG,[2,57]),{19:[1,187],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{19:[1,188],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},o($Vh,[2,34],{38:189,39:[1,190]}),o($Vh,[2,35]),{35:[1,191],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},o($Vh,[2,37]),{35:[2,38]},{28:[1,194],46:[1,192],47:[1,193]},o($Vh,[2,46]),{37:[2,47]},{30:[1,195],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{2:$V0,4:196,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},o($Vh,[2,65]),{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,37:[1,197],40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},o($Vh,[2,54]),o($Vh,[2,26]),o($Vh,[2,27]),o($Vh,[2,31]),{7:199,33:$V8,36:[1,198]},{19:[1,200]},{46:[1,201]},{47:[1,202]},{18:63,25:203,27:$Vj,34:$Vk,47:$Vl,80:55,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{2:$V0,4:204,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},o($VS,[2,50],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:15,21:17,22:18,23:19,6:36,2:$V0,17:$V1,20:$V2,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg}),o($Vh,[2,53]),{2:$V0,4:205,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},o($Vh,[2,33]),o($Vh,[2,36]),{35:[2,39]},{35:[2,40]},{35:[2,41],46:$Vq,47:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},o($VS,[2,49],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:15,21:17,22:18,23:19,6:36,2:$V0,17:$V1,20:$V2,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg}),{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,20:$V2,21:17,22:18,23:19,24:$V3,26:$V4,27:$V5,29:$V6,32:$V7,33:$V8,37:[1,206],40:$V9,41:$Va,42:$Vb,49:$Vc,54:$Vd,55:$Ve,56:$Vf,65:$Vg},o($Vh,[2,32])],
defaultActions: {35:[2,1],178:[2,38],181:[2,47],201:[2,39],202:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    
    let nodos = [];
    let relacion = [];
    let nx = 0;
    let aux1 = 0;
    let aux2 = 0;
    let aux3 = 0;
    function nuevoNodo(contenido){
        nx++;
        var tt = "nodo"+nx.toString()+'[ label=\\"'+contenido+ '\\"]; ' ;
        nodos.push(tt);
        return nx;
    }

    function creaRelaciones(padre, hijos){
        for (i = 0; i < hijos.length; i++) {
            relacion.push("nodo"+padre.toString()+" -> nodo"+hijos[i].toString()+"; ");
        }
    }

    function makeReport(k){
        let g = nuevoNodo("MAIN PROGRAM");
        creaRelaciones(g, k);
        let rs = "digraph G { ";
        for (i = 0; i < nodos.length; i++) {
            rs+=nodos[i];
        }
        for (i = 0; i < relacion.length; i++) {
            rs+=relacion[i];
        }
        rs+= "}";
        nodos = [];
        relacion = [];
        nx=0;
        return rs;
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
break;
case 2:
break;
case 3:return 81
break;
case 4:return 82
break;
case 5:return 83
break;
case 6:return 83
break;
case 7:return 68
break;
case 8:return 69
break;
case 9:return 70
break;
case 10:return 19
break;
case 11:return 58
break;
case 12:return 47
break;
case 13:return 46
break;
case 14:return 66
break;
case 15:return 78
break;
case 16:return 71
break;
case 17:return 72
break;
case 18:return 73
break;
case 19:return 74
break;
case 20:return 75
break;
case 21:return 76
break;
case 22:return 79
break;
case 23:return 77
break;
case 24:return 84
break;
case 25:return 28
break;
case 26:return 30
break;
case 27:return '['
break;
case 28:return ']'
break;
case 29:return 34
break;
case 30:return 35 
break;
case 31:return 36
break;
case 32:return 37
break;
case 33:return 33
break;
case 34:return 39
break;
case 35:return 40
break;
case 36:return 'PRINT'
break;
case 37:return 54
break;
case 38:return 41
break;
case 39:return 42
break;
case 40:return 49
break;
case 41:return 52
break;
case 42:return 53
break;
case 43:return 55
break;
case 44:return 24
break;
case 45:return 65
break;
case 46:return 67
break;
case 47:return 56
break;
case 48:return 26
break;
case 49:return 29
break;
case 50:return 'VAR'
break;
case 51:return 'OF'
break;
case 52:return 'IN'
break;
case 53:return "T_STRING"
break;
case 54:return "T_NUMBER"
break;
case 55:return "T_BOOLEAN"
break;
case 56:return "T_VOID"
break;
case 57:return "GP_TS"
break;
case 58:return 27;
break;
case 59:return 5
break;
case 60:/* errorcillo */
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+))/i,/^(?:({entero}\.{entero}))/i,/^(?:(("[^"]*")))/i,/^(?:(('[^"]*')))/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:,)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\.)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?::)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:print\b)/i,/^(?:break\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:function\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:var\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:graficar_ts\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ast;
exports.Parser = ast.Parser;
exports.parse = function () { return ast.parse.apply(ast, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
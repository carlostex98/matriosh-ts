/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var interpreter = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,14],$V2=[1,16],$V3=[1,35],$V4=[1,33],$V5=[1,32],$V6=[1,34],$V7=[1,31],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,28],$Vf=[1,30],$Vg=[1,29],$Vh=[2,5,17,19,25,27,28,30,33,34,35,40,41,42,50,53,54,55,56,57,66],$Vi=[1,42],$Vj=[1,63],$Vk=[1,59],$Vl=[1,65],$Vm=[1,60],$Vn=[1,61],$Vo=[1,62],$Vp=[1,64],$Vq=[37,60],$Vr=[2,95],$Vs=[1,86],$Vt=[1,87],$Vu=[1,88],$Vv=[1,89],$Vw=[1,90],$Vx=[1,91],$Vy=[1,92],$Vz=[1,93],$VA=[1,94],$VB=[1,95],$VC=[1,96],$VD=[1,97],$VE=[1,98],$VF=[1,99],$VG=[24,37,46,47,48,60,69,70,71,72,73,74,75,76,77,78,79,80],$VH=[1,115],$VI=[1,117],$VJ=[24,37,48,60],$VK=[24,37,46,47,48,60,72,73,74,75,76,77,78,80],$VL=[24,37,46,47,48,60,70,71,72,73,74,75,76,77,78,80],$VM=[24,37,48,60,72,73,74,75,76,77,78,80],$VN=[24,37,48,60,76,77,78,80],$VO=[1,162],$VP=[1,163],$VQ=[1,164],$VR=[1,167],$VS=[1,168],$VT=[29,37,60],$VU=[33,53,54];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Startup":3,"Instructions":4,"EOF":5,"instruction":6,"statIf":7,"statWhile":8,"statDo":9,"statFor":10,"statSwitch":11,"statBreak":12,"statContinue":13,"statConsole":14,"statFunc":15,"statGraph":16,"statCreateVar":17,"statCall":18,"statIncremento":19,"varDefinition":20,"statReturn":21,"varAsig":22,"unarOpr":23,";":24,"RETURN":25,"genExpr":26,"LET":27,"ID":28,"=":29,"CONST":30,"subStat":31,"{":32,"}":33,"GP_TS":34,"IF":35,"(":36,")":37,"moreIf":38,"ELSE":39,"WHILE":40,"DO":41,"FOR":42,"varFor":43,"pasoFor":44,"forVariant":45,"+":46,"-":47,":":48,"typeVar":49,"SWITCH":50,"swCases":51,"swCase":52,"CASE":53,"DEFAULT":54,"BREAK":55,"CONTINUE":56,"FUNCTION":57,"paramsFunc":58,"typeReturn":59,",":60,"tpf":61,"T_VOID":62,"T_NUMBER":63,"T_BOOLEAN":64,"T_STRING":65,"CONSOLE":66,".":67,"LOG":68,"**":69,"*":70,"/":71,"<=":72,">=":73,"<":74,">":75,"==":76,"!=":77,"&&":78,"%":79,"||":80,"otro":81,"NUMBER":82,"DECIMAL":83,"STRING":84,"!":85,"statCall2":86,"paramsCall":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"statCreateVar",19:"statIncremento",24:";",25:"RETURN",27:"LET",28:"ID",29:"=",30:"CONST",32:"{",33:"}",34:"GP_TS",35:"IF",36:"(",37:")",39:"ELSE",40:"WHILE",41:"DO",42:"FOR",46:"+",47:"-",48:":",50:"SWITCH",53:"CASE",54:"DEFAULT",55:"BREAK",56:"CONTINUE",57:"FUNCTION",60:",",62:"T_VOID",63:"T_NUMBER",64:"T_BOOLEAN",65:"T_STRING",66:"CONSOLE",67:".",68:"LOG",69:"**",70:"*",71:"/",72:"<=",73:">=",74:"<",75:">",76:"==",77:"!=",78:"&&",79:"%",80:"||",82:"NUMBER",83:"DECIMAL",84:"STRING",85:"!"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[21,3],[21,2],[20,5],[20,5],[20,3],[31,3],[22,4],[16,2],[7,6],[38,2],[38,2],[38,0],[8,5],[9,7],[10,9],[45,5],[44,3],[44,3],[44,3],[43,4],[43,3],[43,6],[23,4],[23,4],[11,7],[51,2],[51,1],[52,4],[52,3],[12,2],[13,2],[15,8],[15,6],[58,3],[58,1],[58,0],[61,3],[59,1],[59,1],[59,1],[59,1],[49,1],[49,1],[49,1],[14,7],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,1],[81,3],[81,1],[81,1],[81,1],[81,1],[81,2],[81,2],[81,1],[86,4],[18,5],[87,3],[87,1],[87,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 49:
this.$=[$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 82: case 90:
 this.$ = $$[$0]; 
break;
case 22:
 /*nothing*/ 
break;
case 23:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 24:
 this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 25:
this.$ = new Declaration($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column,1);
break;
case 26:
this.$ = new Declaration($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column,2);
break;
case 27:
this.$ = new Declaration($$[$0-1], $$[$01], _$[$0-2].first_line, _$[$0-2].first_column,1);
break;
case 28:
 this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 29:
this.$ = new Declaration($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 30:
 this.$ = new Tsymbol(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 31:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 32: case 33:
 this.$=$$[$0]; 
break;
case 34:
 this.$=null; 
break;
case 35:
 this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 36:
 this.$ = new Dowhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 37:
 this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2],$$[$0], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 38:
 this.$ = null; 
break;
case 39:

        tv = new Literal(1, _$[$0-2].first_line, _$[$0-2].first_column, 0);
        t1 = new Access($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
        t2 =  new Arithmetic(t1, tv, ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
        this.$ = new Declaration($$[$0-2], t2, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 40:

        tv = new Literal(1, _$[$0-2].first_line, _$[$0-2].first_column, 0);
        t1 = new Access($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
        t2 =  new Arithmetic(t1, tv, ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column);
        this.$ = new Declaration($$[$0-2], t2, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 41:
 this.$ = new Declaration($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 42:
 this.$ = new Declaration($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 43:
 this.$ = new Declaration($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 44:
this.$ = new Declaration($$[$0-4], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 45:

        tv = new Literal(1, _$[$0-3].first_line, _$[$0-3].first_column, 0);
        t1 = new Access($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column);
        t2 =  new Arithmetic(t1, tv, ArithmeticOption.PLUS, _$[$0-3].first_line,_$[$0-3].first_column);
        this.$ = new Declaration($$[$0-3], t2, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 46:

        tv = new Literal(1, _$[$0-3].first_line, _$[$0-3].first_column, 0);
        t1 = new Access($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column);
        t2 =  new Arithmetic(t1, tv, ArithmeticOption.MINUS, _$[$0-3].first_line,_$[$0-3].first_column);
        this.$ = new Declaration($$[$0-3], t2, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 47:
 this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line,_$[$0-6].first_column);
break;
case 48:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 50:
 this.$ = new Cases(0,$$[$0-2], new Statement($$[$0], _$[$0-3].first_line, _$[$0-3].first_column), _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 51:
 this.$ = new Cases(1, null, new Statement($$[$0], _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 52:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 53:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 54:

        this.$ = new Function($$[$0-6], $$[$0], $$[$0-4], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 55:

        this.$ = new Function($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 56:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 57:
 this.$ = [$$[$0]]; 
break;
case 58:
 this.$ = []; 
break;
case 59:
 this.$ = $$[$0-2]; 
break;
case 67:
 this.$ = new Print($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 68:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 69:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 70:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POW, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 71:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.BY, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 72:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 73:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 74:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 75:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 76:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 77:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 78:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 79:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 80:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MOD, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 81:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 83:
 this.$ = $$[$0-1]; 
break;
case 84:
 this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0); 
break;
case 85:
 this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1); 
break;
case 86:
 this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 87:
 this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 88:
 this.$ = new Relational($$[$0-1], $$[$0-1], RelationalOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 89:
 this.$ = new Arithmetic(new Literal(-1, _$[$0-1].first_line, _$[$0-1].first_column, 0), $$[$0], ArithmeticOption.BY, _$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 91:
 this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 92:
 this.$ = new Call($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 93:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 94:
 this.$=[$$[$0]]; 
break;
case 95:
 this.$=[]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,19:$V2,20:17,21:18,22:19,23:20,25:$V3,27:$V4,28:$V5,30:$V6,34:$V7,35:$V8,40:$V9,41:$Va,42:$Vb,50:$Vc,55:$Vd,56:$Ve,57:$Vf,66:$Vg},{1:[3]},{2:$V0,5:[1,36],6:37,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,19:$V2,20:17,21:18,22:19,23:20,25:$V3,27:$V4,28:$V5,30:$V6,34:$V7,35:$V8,40:$V9,41:$Va,42:$Vb,50:$Vc,55:$Vd,56:$Ve,57:$Vf,66:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),o($Vh,[2,21]),{24:[1,38]},{36:[1,39]},{36:[1,40]},{31:41,32:$Vi},{36:[1,43]},{36:[1,44]},{24:[1,45]},{24:[1,46]},{67:[1,47]},{28:[1,48]},{24:[1,49]},{29:[1,51],36:[1,50],46:[1,52],47:[1,53]},{28:[1,54]},{28:[1,55]},{24:[1,57],26:56,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,22]),{26:67,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:68,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{40:[1,69]},{2:$V0,4:70,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,19:$V2,20:17,21:18,22:19,23:20,25:$V3,27:$V4,28:$V5,30:$V6,34:$V7,35:$V8,40:$V9,41:$Va,42:$Vb,50:$Vc,55:$Vd,56:$Ve,57:$Vf,66:$Vg},{27:[1,72],28:[1,73],43:71},{26:74,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},o($Vh,[2,52]),o($Vh,[2,53]),{68:[1,75]},{36:[1,76]},o($Vh,[2,30]),o($Vq,$Vr,{81:58,86:66,87:77,26:78,28:$Vj,36:$Vk,47:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp}),{26:79,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{46:[1,80]},{47:[1,81]},{24:[1,83],29:[1,82]},{29:[1,84]},{24:[1,85],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},o($Vh,[2,24]),o($VG,[2,82]),{26:100,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},o($VG,[2,84]),o($VG,[2,85]),o($VG,[2,86]),o($VG,[2,87],{36:[1,101]}),{26:102,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:103,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},o($VG,[2,90]),{37:[1,104],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{37:[1,105],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{36:[1,106]},{2:$V0,6:37,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,19:$V2,20:17,21:18,22:19,23:20,25:$V3,27:$V4,28:$V5,30:$V6,33:[1,107],34:$V7,35:$V8,40:$V9,41:$Va,42:$Vb,50:$Vc,55:$Vd,56:$Ve,57:$Vf,66:$Vg},{24:[1,108]},{28:[1,109]},{29:[1,110]},{37:[1,111],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{36:[1,112]},o($Vq,[2,58],{58:113,61:114,28:$VH}),{37:[1,116],60:$VI},o($Vq,[2,94],{46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),{24:[1,118],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{24:[1,119]},{24:[1,120]},{26:121,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},o($Vh,[2,27]),{26:122,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},o($Vh,[2,23]),{26:123,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:124,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:125,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:126,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:127,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:128,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:129,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:130,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:131,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:132,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:133,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:134,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:135,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{26:136,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{37:[1,137],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},o($Vq,$Vr,{81:58,86:66,26:78,87:138,28:$Vj,36:$Vk,47:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp}),o($VJ,[2,88],{46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),o($VK,[2,89],{69:$Vu,70:$Vv,71:$Vw,79:$VE}),{31:139,32:$Vi},{31:140,32:$Vi},{26:141,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},o([2,5,17,19,25,27,28,30,33,34,35,39,40,41,42,50,53,54,55,56,57,66],[2,28]),{26:142,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{29:[1,143],48:[1,144]},{26:145,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{32:[1,146]},{26:147,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{37:[1,148],60:[1,149]},o($Vq,[2,57]),{48:[1,150]},{24:[1,151]},{26:152,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},o($Vh,[2,29]),o($Vh,[2,45]),o($Vh,[2,46]),{24:[1,153],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{24:[1,154],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},o($VK,[2,68],{69:$Vu,70:$Vv,71:$Vw,79:$VE}),o($VK,[2,69],{69:$Vu,70:$Vv,71:$Vw,79:$VE}),o($VJ,[2,70],{46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),o($VL,[2,71],{69:$Vu,79:$VE}),o($VL,[2,72],{69:$Vu,79:$VE}),o($VM,[2,73],{46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,79:$VE}),o($VM,[2,74],{46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,79:$VE}),o($VM,[2,75],{46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,79:$VE}),o($VM,[2,76],{46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,79:$VE}),o($VN,[2,77],{46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,79:$VE}),o($VN,[2,78],{46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,79:$VE}),o([24,37,48,60,78,80],[2,79],{46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,79:$VE}),o($VJ,[2,80],{46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),o([24,37,48,60,80],[2,81],{46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE}),o($VG,[2,83]),{37:[1,155],60:$VI},o($Vh,[2,34],{38:156,39:[1,157]}),o($Vh,[2,35]),{37:[1,158],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{24:[1,159],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{26:160,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{49:161,63:$VO,64:$VP,65:$VQ},{24:[2,43],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{51:165,52:166,53:$VR,54:$VS},{37:[1,169],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{31:171,32:$Vi,48:[1,170]},{28:$VH,61:172},{49:173,63:$VO,64:$VP,65:$VQ},o($Vh,[2,92]),o($Vq,[2,93],{46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),o($Vh,[2,25]),o($Vh,[2,26]),o($VG,[2,91]),o($Vh,[2,31]),{7:175,31:174,32:$Vi,35:$V8},{24:[1,176]},{28:[1,178],44:177},{24:[2,42],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{29:[1,179]},o($VT,[2,64]),o($VT,[2,65]),o($VT,[2,66]),{33:[1,180],52:181,53:$VR,54:$VS},o($VU,[2,49]),{26:182,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{48:[1,183]},{24:[1,184]},{59:185,62:[1,186],63:[1,187],64:[1,188],65:[1,189]},o($Vh,[2,55]),o($Vq,[2,56]),o($Vq,[2,59]),o($Vh,[2,32]),o($Vh,[2,33]),o($Vh,[2,36]),{37:[1,190]},{29:[1,193],46:[1,191],47:[1,192]},{26:194,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},o($Vh,[2,47]),o($VU,[2,48]),{46:$Vs,47:$Vt,48:[1,195],69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{2:$V0,4:196,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,19:$V2,20:17,21:18,22:19,23:20,25:$V3,27:$V4,28:$V5,30:$V6,34:$V7,35:$V8,40:$V9,41:$Va,42:$Vb,50:$Vc,55:$Vd,56:$Ve,57:$Vf,66:$Vg},o($Vh,[2,67]),{31:197,32:$Vi},{32:[2,60]},{32:[2,61]},{32:[2,62]},{32:[2,63]},{31:198,32:$Vi},{46:[1,199]},{47:[1,200]},{26:201,28:$Vj,36:$Vk,47:$Vl,81:58,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:66},{24:[2,44],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{2:$V0,4:202,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:15,19:$V2,20:17,21:18,22:19,23:20,25:$V3,27:$V4,28:$V5,30:$V6,34:$V7,35:$V8,40:$V9,41:$Va,42:$Vb,50:$Vc,55:$Vd,56:$Ve,57:$Vf,66:$Vg},o($VU,[2,51],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:15,20:17,21:18,22:19,23:20,6:37,2:$V0,17:$V1,19:$V2,25:$V3,27:$V4,28:$V5,30:$V6,34:$V7,35:$V8,40:$V9,41:$Va,42:$Vb,50:$Vc,55:$Vd,56:$Ve,57:$Vf,66:$Vg}),o($Vh,[2,54]),o($Vh,[2,37]),{37:[2,39]},{37:[2,40]},{37:[2,41],46:$Vs,47:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},o($VU,[2,50],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:15,20:17,21:18,22:19,23:20,6:37,2:$V0,17:$V1,19:$V2,25:$V3,27:$V4,28:$V5,30:$V6,34:$V7,35:$V8,40:$V9,41:$Va,42:$Vb,50:$Vc,55:$Vd,56:$Ve,57:$Vf,66:$Vg})],
defaultActions: {36:[2,1],186:[2,60],187:[2,61],188:[2,62],189:[2,63],199:[2,39],200:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Access} = require('../Expression/Access');
    const {Literal} = require('../Expression/Literal');
    const {If} = require('../Instruction/If');
    const {Print} = require('../Instruction/Print');
    const {Statement} = require('../Instruction/Statement');
    const {While} = require('../Instruction/While');
    const {Dowhile} = require('../Instruction/Dowhile');
    const {Declaration} = require('../Instruction/Declaration');
    const {Break} = require('../Instruction/Break');
    const {Continue} = require('../Instruction/Continue');
    const {Call} = require('../Instruction/Call');
    const {Function} = require('../Instruction/Function');
    const {Return} = require('../Instruction/Return');
    const {For} = require('../Instruction/For');
    const {Cases} =  require("../Instruction/Cases");
    const {Switch} =  require("../Instruction/Switch");
    const {Tsymbol} =  require("../Instruction/Tsymbol");
    let tv = null;
    let t1 = null;
    let t2 = null;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
break;
case 2:
break;
case 3:return 83
break;
case 4:return 82
break;
case 5:return 84
break;
case 6:return 84
break;
case 7:return 69
break;
case 8:return 70
break;
case 9:return 71
break;
case 10:return 24
break;
case 11:return 60
break;
case 12:return 47
break;
case 13:return 46
break;
case 14:return 67
break;
case 15:return 79
break;
case 16:return 72
break;
case 17:return 73
break;
case 18:return 74
break;
case 19:return 75
break;
case 20:return 76
break;
case 21:return 77
break;
case 22:return 80
break;
case 23:return 78
break;
case 24:return 85
break;
case 25:return 29
break;
case 26:return 48
break;
case 27:return '['
break;
case 28:return ']'
break;
case 29:return 36
break;
case 30:return 37 
break;
case 31:return 32
break;
case 32:return 33
break;
case 33:return 35
break;
case 34:return 39
break;
case 35:return 40
break;
case 36:return 'PRINT'
break;
case 37:return 55
break;
case 38:return 41
break;
case 39:return 42
break;
case 40:return 50
break;
case 41:return 53
break;
case 42:return 54
break;
case 43:return 56
break;
case 44:return 25
break;
case 45:return 66
break;
case 46:return 68
break;
case 47:return 57
break;
case 48:return 27
break;
case 49:return 30
break;
case 50:return 'VAR'
break;
case 51:return 'OF'
break;
case 52:return 'IN'
break;
case 53:return "T_STRING"
break;
case 54:return "T_NUMBER"
break;
case 55:return "T_BOOLEAN"
break;
case 56:return "T_VOID"
break;
case 57:return "GP_TS"
break;
case 58:return 28;
break;
case 59:return 5
break;
case 60:/* error */
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+)[.]([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(("[^"]*")))/i,/^(?:(('[^"]*')))/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:,)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\.)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?::)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:print\b)/i,/^(?:break\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:function\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:var\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:graficar_ts\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interpreter;
exports.Parser = interpreter.Parser;
exports.parse = function () { return interpreter.parse.apply(interpreter, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
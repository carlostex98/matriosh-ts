/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,16],$V2=[1,33],$V3=[1,31],$V4=[1,30],$V5=[1,32],$V6=[1,29],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,26],$Ve=[1,28],$Vf=[1,27],$Vg=[5,35],$Vh=[5,17,19,23,26,27,29,30,31,35,38,39,40,50,56,57,58,66],$Vi=[1,46],$Vj=[1,57],$Vk=[1,53],$Vl=[1,58],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,59],$Vq=[1,73],$Vr=[1,82],$Vs=[1,83],$Vt=[1,84],$Vu=[1,85],$Vv=[1,86],$Vw=[1,87],$Vx=[1,88],$Vy=[1,89],$Vz=[1,90],$VA=[1,91],$VB=[1,92],$VC=[1,93],$VD=[1,94],$VE=[1,95],$VF=[25,33,47,48,54,69,70,71,72,73,74,75,76,77,78,79,80,87],$VG=[27,33],$VH=[5,17,19,23,25,26,27,29,30,31,33,35,38,39,40,47,48,50,54,56,57,58,66,69,70,71,72,73,74,75,76,77,78,79,80,87],$VI=[33,87],$VJ=[25,33,47,48,54,72,73,74,75,76,77,78,80,87],$VK=[25,33,54,87],$VL=[1,145],$VM=[1,146],$VN=[1,147],$VO=[1,148],$VP=[25,33,47,48,54,69,70,72,73,74,75,76,77,78,80,87],$VQ=[25,33,54,72,73,74,75,76,77,78,80,87],$VR=[25,33,54,76,77,78,80,87],$VS=[1,162],$VT=[1,163],$VU=[27,33,34],$VV=[35,53,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Startup":3,"Instructions":4,"EOF":5,"instruction":6,"statIf":7,"statWhile":8,"statDo":9,"statFor":10,"statSwitch":11,"statBreak":12,"statContinue":13,"statConsole":14,"statFunc":15,"statGraph":16,"statCreateVar":17,"statCall":18,"statIncremento":19,"varDefinition":20,"statReturn":21,"varAsig":22,"RETURN":23,"genExpr":24,";":25,"LET":26,"ID":27,"=":28,"CONST":29,"GP_TS":30,"IF":31,"(":32,")":33,"{":34,"}":35,"moreIf":36,"ELSE":37,"WHILE":38,"DO":39,"FOR":40,"forVariant":41,"VAR":42,"OF":43,"IN":44,"varFor":45,"pasoFor":46,"+":47,"-":48,"unarOpr":49,"SWITCH":50,"swCases":51,"swCase":52,"CASE":53,":":54,"DEFAULT":55,"BREAK":56,"CONTINUE":57,"FUNCTION":58,"paramsFunc":59,"typeReturn":60,"tpf":61,"T_VOID":62,"T_NUMBER":63,"T_BOOLEAN":64,"T_STRING":65,"CONSOLE":66,".":67,"LOG":68,"*":69,"/":70,"^":71,"<":72,">":73,"<=":74,">=":75,"==":76,"!=":77,"&&":78,"%":79,"||":80,"otro":81,"NUMBER":82,"DECIMAL":83,"STRING":84,"!":85,"paramsCall":86,",":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"statCreateVar",19:"statIncremento",23:"RETURN",25:";",26:"LET",27:"ID",28:"=",29:"CONST",30:"GP_TS",31:"IF",32:"(",33:")",34:"{",35:"}",37:"ELSE",38:"WHILE",39:"DO",40:"FOR",42:"VAR",43:"OF",44:"IN",47:"+",48:"-",50:"SWITCH",53:"CASE",54:":",55:"DEFAULT",56:"BREAK",57:"CONTINUE",58:"FUNCTION",62:"T_VOID",63:"T_NUMBER",64:"T_BOOLEAN",65:"T_STRING",66:"CONSOLE",67:".",68:"LOG",69:"*",70:"/",71:"^",72:"<",73:">",74:"<=",75:">=",76:"==",77:"!=",78:"&&",79:"%",80:"||",82:"NUMBER",83:"DECIMAL",84:"STRING",85:"!",87:","},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[21,3],[21,2],[20,5],[20,5],[20,3],[22,4],[16,2],[7,8],[36,4],[36,2],[36,0],[8,7],[9,9],[10,7],[41,4],[41,4],[41,5],[46,4],[46,4],[46,3],[45,4],[45,3],[49,4],[49,4],[11,7],[51,2],[51,1],[52,6],[52,4],[12,2],[13,2],[15,9],[59,2],[59,1],[61,3],[60,1],[60,1],[60,1],[60,1],[14,7],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,1],[81,3],[81,1],[81,1],[81,1],[81,1],[81,2],[81,2],[81,1],[18,3],[18,4],[86,3],[86,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 46:
$$[$0-1].push($$[$0]);
break;
case 3: case 47:
this.$=[$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 54: case 56: case 57: case 58: case 59: case 75: case 77: case 78: case 79: case 80: case 83:
 this.$ = $$[$0]; 
break;
case 27: case 50: case 51: case 81: case 82:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 28:
this.$ = $$[$0-7]+$$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 29:
this.$=$$[$0-3] + $$[$0-2] + $$[$0];
break;
case 30:
this.$=$$[$0-1] + $$[$0];
break;
case 31:
this.$="";
break;
case 32: case 34:
 this.$ = $$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 33:
 this.$ = $$[$0-8]+$$[$0-7]+$$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0]; 
break;
case 35: case 36:
 this.$ = $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 37:
 this.$ = $$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 42:
 this.$ = $$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 43: case 44:
 this.$ = $$[$0-3]+$$[$0-2]+$$[$0-1]; 
break;
case 45:
 this.$ = $$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 48:
 this.$ = $$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 49:
this.$ = $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 52:
this.$ = $$[$0-8]+$$[$0-7]+$$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 53:
 this.$ = $$[$0-1]+$$[$0]; 
break;
case 55: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 76:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 60:
 this.$ = $$[$0-6] + $$[$0-5]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,26:$V3,27:$V4,29:$V5,30:$V6,31:$V7,38:$V8,39:$V9,40:$Va,50:$Vb,56:$Vc,57:$Vd,58:$Ve,66:$Vf},{1:[3]},{5:[1,34]},o($Vg,[2,3],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:15,20:17,21:18,22:19,4:35,17:$V0,19:$V1,23:$V2,26:$V3,27:$V4,29:$V5,30:$V6,31:$V7,38:$V8,39:$V9,40:$Va,50:$Vb,56:$Vc,57:$Vd,58:$Ve,66:$Vf}),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),{32:[1,36]},{32:[1,37]},{34:[1,38]},{32:[1,39]},{32:[1,40]},{25:[1,41]},{25:[1,42]},{67:[1,43]},{32:[1,44]},{25:[1,45]},{28:[1,47],32:$Vi},{27:[1,48]},{27:[1,49]},{18:60,24:50,25:[1,51],27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{1:[2,1]},o($Vg,[2,2]),{18:60,24:61,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:62,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{4:63,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,26:$V3,27:$V4,29:$V5,30:$V6,31:$V7,38:$V8,39:$V9,40:$Va,50:$Vb,56:$Vc,57:$Vd,58:$Ve,66:$Vf},{26:[1,67],27:[1,68],41:64,42:[1,65],45:66},{18:60,24:69,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},o($Vh,[2,50]),o($Vh,[2,51]),{68:[1,70]},{27:$Vq,59:71,61:72},o($Vh,[2,27]),{18:60,24:76,27:$Vj,32:$Vk,33:[1,74],48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:75},{18:60,24:77,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{25:[1,79],28:[1,78]},{28:[1,80]},{25:[1,81],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},o($Vh,[2,22]),o($VF,[2,75]),{18:60,24:96,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},o($VF,[2,77]),o($VF,[2,78]),o($VF,[2,79]),o($VF,[2,80],{32:$Vi}),{18:60,24:97,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:98,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},o($VF,[2,83]),{33:[1,99],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},{33:[1,100],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},{35:[1,101]},{33:[1,102]},{27:[1,103]},{25:[1,104]},{27:[1,105]},{28:[1,106]},{33:[1,107],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},{32:[1,108]},{27:$Vq,33:[1,109],61:110},o($VG,[2,54]),{54:[1,111]},o($VH,[2,84]),{33:[1,112],87:[1,113]},o($VI,[2,87],{47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE}),{25:[1,114],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},{18:60,24:115,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},o($Vh,[2,25]),{18:60,24:116,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},o($Vh,[2,21]),{18:60,24:117,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:118,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:119,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:120,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:121,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:122,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:123,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:124,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:125,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:126,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:127,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:128,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:129,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{18:60,24:130,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{33:[1,131],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},o($VJ,[2,81],{69:$Vt,70:$Vu,71:$Vv,79:$VD}),o($VK,[2,82],{47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE}),{34:[1,132]},{34:[1,133]},{38:[1,134]},{34:[1,135]},{43:[1,136],44:[1,137]},{18:60,24:138,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{28:[1,139]},{18:60,24:140,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{34:[1,141]},{18:60,24:142,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{54:[1,143]},o($VG,[2,53]),{60:144,62:$VL,63:$VM,64:$VN,65:$VO},o($VH,[2,85]),{18:60,24:149,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},o($Vh,[2,26]),{25:[1,150],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},{25:[1,151],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},o($VJ,[2,61],{69:$Vt,70:$Vu,71:$Vv,79:$VD}),o($VJ,[2,62],{69:$Vt,70:$Vu,71:$Vv,79:$VD}),o($VP,[2,63],{71:$Vv,79:$VD}),o($VP,[2,64],{71:$Vv,79:$VD}),o($VK,[2,65],{47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE}),o($VQ,[2,66],{47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,79:$VD}),o($VQ,[2,67],{47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,79:$VD}),o($VQ,[2,68],{47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,79:$VD}),o($VQ,[2,69],{47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,79:$VD}),o($VR,[2,70],{47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,79:$VD}),o($VR,[2,71],{47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,79:$VD}),o([25,33,54,78,80,87],[2,72],{47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,79:$VD}),o($VK,[2,73],{47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE}),o([25,33,54,80,87],[2,74],{47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),o($VF,[2,76]),{4:152,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,26:$V3,27:$V4,29:$V5,30:$V6,31:$V7,38:$V8,39:$V9,40:$Va,50:$Vb,56:$Vc,57:$Vd,58:$Ve,66:$Vf},{4:153,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,26:$V3,27:$V4,29:$V5,30:$V6,31:$V7,38:$V8,39:$V9,40:$Va,50:$Vb,56:$Vc,57:$Vd,58:$Ve,66:$Vf},{32:[1,154]},{4:155,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,26:$V3,27:$V4,29:$V5,30:$V6,31:$V7,38:$V8,39:$V9,40:$Va,50:$Vb,56:$Vc,57:$Vd,58:$Ve,66:$Vf},{27:[1,156]},{27:[1,157]},{25:[1,158],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},{18:60,24:159,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{25:[2,42],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},{51:160,52:161,53:$VS,55:$VT},{33:[1,164],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},{60:165,62:$VL,63:$VM,64:$VN,65:$VO},o($VG,[2,55]),o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VI,[2,86],{47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE}),o($Vh,[2,23]),o($Vh,[2,24]),{35:[1,166]},{35:[1,167]},{18:60,24:168,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{35:[1,169]},{33:[2,35]},{33:[2,36]},{27:[1,171],46:170},{25:[2,41],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},{35:[1,172]},{35:[2,47],51:173,52:161,53:$VS,55:$VT},{18:60,24:174,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{34:[1,175]},{25:[1,176]},{34:[1,177]},o($Vh,[2,31],{36:178,37:[1,179]}),o($Vh,[2,32]),{33:[1,180],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},o($Vh,[2,34]),{33:[2,37]},{28:[1,183],47:[1,181],48:[1,182]},o($Vh,[2,45]),{35:[2,46]},{47:$Vr,48:$Vs,54:[1,184],69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},{4:185,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,26:$V3,27:$V4,29:$V5,30:$V6,31:$V7,38:$V8,39:$V9,40:$Va,50:$Vb,56:$Vc,57:$Vd,58:$Ve,66:$Vf},o($Vh,[2,60]),{4:186,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,26:$V3,27:$V4,29:$V5,30:$V6,31:$V7,38:$V8,39:$V9,40:$Va,50:$Vb,56:$Vc,57:$Vd,58:$Ve,66:$Vf},o($Vh,[2,28]),{7:188,31:$V7,34:[1,187]},{25:[1,189]},{47:[1,190]},{48:[1,191]},{18:60,24:192,27:$Vj,32:$Vk,48:$Vl,81:52,82:$Vm,83:$Vn,84:$Vo,85:$Vp},{34:[1,193]},{35:[1,194]},{35:[1,195]},{4:196,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,26:$V3,27:$V4,29:$V5,30:$V6,31:$V7,38:$V8,39:$V9,40:$Va,50:$Vb,56:$Vc,57:$Vd,58:$Ve,66:$Vf},o($Vh,[2,30]),o($Vh,[2,33]),{25:[1,197]},{25:[1,198]},{33:[2,40],47:$Vr,48:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE},{4:199,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:$V2,26:$V3,27:$V4,29:$V5,30:$V6,31:$V7,38:$V8,39:$V9,40:$Va,50:$Vb,56:$Vc,57:$Vd,58:$Ve,66:$Vf},o($VV,[2,49]),o($Vh,[2,52]),{35:[1,200]},{33:[2,38]},{33:[2,39]},{35:[1,201]},o($Vh,[2,29]),o($VV,[2,48])],
defaultActions: {34:[2,1],156:[2,35],157:[2,36],170:[2,37],173:[2,46],197:[2,38],198:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    //import of all the needs
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 82
break;
case 2:return 83
break;
case 3:return 84
break;
case 4:return 84
break;
case 5:return 69
break;
case 6:return 70
break;
case 7:return 25
break;
case 8:return 87
break;
case 9:return 48
break;
case 10:return 47
break;
case 11:return 71
break;
case 12:return 67
break;
case 13:return 79
break;
case 14:return 72
break;
case 15:return 73
break;
case 16:return 74
break;
case 17:return 75
break;
case 18:return 76
break;
case 19:return 77
break;
case 20:return 80
break;
case 21:return 78
break;
case 22:return 85
break;
case 23:return 28
break;
case 24:return '['
break;
case 25:return ']'
break;
case 26:return 32
break;
case 27:return 33 
break;
case 28:return 34
break;
case 29:return 35
break;
case 30:return 31
break;
case 31:return 37
break;
case 32:return 38
break;
case 33:return 'PRINT'
break;
case 34:return 56
break;
case 35:return 39
break;
case 36:return 40
break;
case 37:return 50
break;
case 38:return 53
break;
case 39:return 55
break;
case 40:return 57
break;
case 41:return 23
break;
case 42:return 66
break;
case 43:return 68
break;
case 44:return 58
break;
case 45:return 26
break;
case 46:return 29
break;
case 47:return 42
break;
case 48:return 43
break;
case 49:return 44
break;
case 50:return "T_STRING"
break;
case 51:return "T_NUMBER"
break;
case 52:return "T_BOOLEAN"
break;
case 53:return "T_VOID"
break;
case 54:return "GP_TS"
break;
case 55:return 27;
break;
case 56:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:([0-9]+))/i,/^(?:({entero}\.{entero}))/i,/^(?:(("[^"]*")))/i,/^(?:(('[^"]*')))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:,)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:%)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:print\b)/i,/^(?:break\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:function\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:var\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:graficar_ts\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}